# -*- coding: utf-8 -*-
"""Proyecto multivariada.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Azd7n44qpt7EJFsH4PWGzt-TOYCctdRg
"""
"""
pip install geemap

pip install geopandas

pip install -q kaggle

!pip install -q -U tensorflow_addons
"""
#%%

import IPython.display as ipd
import math
import numpy as np

#mapping:
import pandas as pd 
import folium
from folium import Marker
from folium.plugins import HeatMap
from folium.plugins import MarkerCluster

#plotting
import matplotlib.pyplot as plt 
import seaborn as sns 

#Audio
import librosa
import librosa.display
#%%

ipd.Audio('/Users/LuisaToro/Desktop/Bird prediction/train_audio/afrsil1/XC125458.ogg')

#%%

"""#Exploratory data analysis

"""

#We choose a random audio file to perform an exploratory visualization
#x is the audio time series, sr is the sampling rate of x
x , sr = librosa.load('/Users/LuisaToro/Desktop/Bird prediction/train_audio/afrsil1/XC125458.ogg')

"""Autocorrelation plot"""
#ac is the autocorrelation, which determines whether an audio has periodicity
#odf allows the change of hop_length, the lag in which different times are compared
odf = librosa.onset.onset_strength(y=x, sr=sr, hop_length=5000)
ac = librosa.autocorrelate(odf)

#
fig, ax = plt.subplots()
ax.plot(ac)
ax.set(title='Auto-correlation for African Silverbill, Euodice cantans', xlabel='Lag (frames)')

"""Waveplot"""
plt.figure()
librosa.display.waveshow(x, sr=sr)
plt.title("Waveplot")

"""Mel spectogram"""

D = librosa.stft(x)
S = librosa.amplitude_to_db(np.abs(D), ref=np.max)
plt.figure()
librosa.display.specshow(S)
plt.colorbar()
plt.title('Linear frequency power spectrogram')
plt.ylabel('Hz')
plt.xlabel('Time')

"""Spectral decomposition"""

"""Spectral centroid"""
cent = librosa.feature.spectral_centroid(y=x, sr=sr)
times = librosa.times_like(cent)
fig, ax = plt.subplots()
S, phase = librosa.magphase(librosa.stft(y=x))
librosa.display.specshow(librosa.amplitude_to_db(S, ref=np.max), y_axis='log', x_axis='time', ax=ax)
ax.plot(times, cent.T, label='Spectral centroid', color='w')
ax.legend(loc='upper right')
ax.set(title='log Power spectrogram')

"""Spectral bandwidth"""

fig, ax = plt.subplots()
bandw = librosa.feature.spectral_bandwidth(y=x, sr=sr)
times = librosa.times_like(bandw)

librosa.display.specshow(librosa.amplitude_to_db(S, ref=np.max),y_axis='log', x_axis='time', ax=ax)
ax.set(title='log Power spectrogram')
ax.fill_between(times, np.maximum(0, cent[0] - bandw[0]),np.minimum(cent[0] + bandw[0], sr/2), alpha=0.5, label='Centroid +- bandwidth')
ax.plot(times, cent[0], label='Spectral centroid', color='w')
ax.legend(loc='lower right')

"""Spectral rolloff"""
rolloff = librosa.feature.spectral_rolloff(y=x, sr=sr, roll_percent=0.99)
rolloff_min = librosa.feature.spectral_rolloff(y=x, sr=sr, roll_percent=0.01)
fig, ax = plt.subplots()
librosa.display.specshow(librosa.amplitude_to_db(S, ref=np.max),y_axis='log', x_axis='time', ax=ax)
ax.plot(librosa.times_like(rolloff), rolloff[0], label='Roll-off frequency (0.99)')
ax.plot(librosa.times_like(rolloff), rolloff_min[0], color='w', label='Roll-off frequency (0.01)')
ax.legend(loc='lower right')
ax.set(title='log Power spectrogram')
#%%

"""Plotting cosas"""

train_metadata=pd.read_csv('/Users/LuisaToro/Desktop/Bird prediction/train_metadata.csv')


#plot of ratings of audio data :
plt.figure('Rating')
sns.countplot(x=train_metadata.rating,data=train_metadata)
plt.title('Ratings')
plt.ylabel('Amount of audio files')
plt.xlabel('Rating')

plt.figure('Most Audio files')
mostcommon=train_metadata['common_name'].value_counts().sort_values(ascending=False)[:10]
#plt.subplot(2,1,1)
plt.bar(x=mostcommon.index,height=mostcommon.values)
plt.xticks(rotation=45)
plt.ylabel('Amount of audio files')
plt.title('Birds with most audio files')

plt.figure('Least audio files')
leastcommon=train_metadata['common_name'].value_counts().sort_values(ascending=True)[:10]
#plt.subplot(2,1,1)
plt.bar(x=leastcommon.index,height=leastcommon.values)
plt.xticks(rotation=45)
plt.ylabel('Amount of audio files')
plt.title('Birds with least audio files')

#%%

"""Mapping"""


#Gets a starting point, inlatitud and longitud coordenated from train metadata.
coordenates=(train_metadata['latitude'].mean(),train_metadata['longitude'].mean())

#Creates a map
map1=folium.Map(coordenates)

#heatmap:
HeatMap(data=train_metadata[['latitude','longitude']],
        radius=5).add_to(map1)

#Common species location

    
most_common = train_metadata[train_metadata['common_name'].isin(mostcommon.index)]


map2 = folium.Map(location=coordenates)

mc = MarkerCluster()

for idx,row in most_common.iterrows():
    location=(row['latitude'],row['longitude'])
    birdname=row['common_name']
    
    if not math.isnan(location[0]) and not math.isnan(location[1]):
        mc.add_child(Marker(location,tooltip=f'<b>{birdname}</b>'))
    
map2.add_child(mc)

#Uncommon species location

least_common=train_metadata[train_metadata['common_name'].isin(leastcommon.index)]


map3 = folium.Map(location=coordenates)

mc = MarkerCluster()

for idx,row in least_common.iterrows():
    
    location=(row['latitude'],row['longitude'])
    birdname=row['common_name']

    if not math.isnan(location[0]) and not math.isnan(location[1]):
        mc.add_child(Marker(location,tooltip=f'<b>{birdname}</b>'))
    
map3.add_child(mc)

